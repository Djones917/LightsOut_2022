{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\night\\\\Desktop\\\\LightsOut_2022\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\night\\\\Desktop\\\\LightsOut_2022\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\night\\\\Desktop\\\\LightsOut_2022\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\night\\\\Desktop\\\\LightsOut_2022\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\night\\\\Desktop\\\\LightsOut_2022\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\night\\\\Desktop\\\\LightsOut_2022\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\night\\\\Desktop\\\\LightsOut_2022\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n  function Board(props) {\n    var _this;\n    _classCallCheck(this, Board);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    // TODO: set initial state\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      // TODO: create array-of-arrays of true/false values\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n        board.push(row);\n      }\n      return board;\n    } /** handle changing a cell: update board & determine if winner */\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n      var board = this.state.board;\n      var _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n      // TODO: flip this cell and the cells around it\n      flipCell(y, x); //Flip initial cell\n      flipCell(y, x - 1); //flip left\n      flipCell(y, x + 1); //flip right\n      flipCell(y - 1, x); //flip below\n      flipCell(y + 1, x); //flip above\n\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    } /** Render game board or winning message. */\n  }, {\n    key: \"makeTable\",\n    value: function makeTable() {\n      var _this2 = this;\n      var tblBoard = [];\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 11\n            }\n          }));\n        };\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }\n        }, row));\n      }\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, tblBoard));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }\n      }, this.state.hasWon ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"winner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, \"YOU\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, \"WIN!\")) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Board-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }\n      }, \"Out\")), this.makeTable()));\n    }\n  }]);\n  return Board;\n}(Component);\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","makeTable","defaultProps"],"sources":["C:/Users/night/Desktop/LightsOut_2022/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}